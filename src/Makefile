## -*- Mode: Makefile; -*-                                              
##
## The 'bestguess' project
##

# PROGRAM and REPORTPROGRAM should be set by the Makefile that calls this one
PROGRAM?=bestguess
REPORTPROGRAM?=bestreport

OBJECTS= cli.o utils.o optable.o exec.o csv.o stats.o reports.o printing.o

# When DEBUG is set, we get extra debugging output and expensive
# assertions will run.  E.g. 'make DEBUG=1'
ifdef DEBUG
  DEBUG_FLAG=-DDEBUG
endif

default: debug

help:
	@echo "Useful makefile targets (src directory)"
	@echo "  release Builds in release mode"
	@echo "  debug   Builds in debug mode (ASAN, assertions, etc.)"
	@echo "  clean   Deletes old compilation files"
	@echo "  deps    Rebuilds dependency info in Makefile.depends"
	@echo "  tags    Rebuilds tag files e.g. for Emacs"
	@echo "  config  Print important configuration settings"

debug: 
	@echo "NOTE: Building in debug mode"; \
	$(MAKE) RELEASE_MODE=false $(PROGRAM)

release: 
	@echo "NOTE: Building in RELEASE MODE"; \
	$(MAKE) RELEASE_MODE=true $(PROGRAM)

# ------------------------------------------------------------------

install: $(PROGRAM)
	@printf "NOTE: DESTDIR is $(DESTDIR)\n"; \
	mkdir -p "$(DESTDIR)/bin"; \
        if [[ $$? -ne 0 ]]; then \
	  echo "Failed to create $(DESTDIR)/bin"; \
	  exit -1;\
	fi; \
	cp "$(PROGRAM)" "$(DESTDIR)/bin/$(PROGRAM)"; \
        if [[ $$? -ne 0 ]]; then \
	  echo "Failed to copy $(PROGRAM)"; \
	  exit -1;\
	fi; \
	printf "Copied $(PROGRAM) to $(DESTDIR)/bin\n"; \
	ln -fs "$(DESTDIR)/bin/$(PROGRAM)" "$(DESTDIR)/bin/$(REPORTPROGRAM)"; \
        if [[ $$? -ne 0 ]]; then \
	  echo "Failed to create symlink from $(PROGRAM) to $(REPORTPROGRAM)"; \
	  exit -1;\
	fi; \
	printf "Linked $(REPORTPROGRAM) in $(DESTDIR)/bin\n";

# -----------------------------------------------------------------------------
RELEASE_MODE ?= false
include Makefile.defines
include Makefile.depends

# Log levels: 0=confess, 1=warn, 2=info, 3=trace
LOGLEVEL ?= 1
COPT ?= -O2 

CWARNS = -Wall -Wextra \
	 -Wcast-align \
	 -Wcast-qual \
	 -Wdisabled-optimization \
	 -Wpointer-arith \
	 -Wshadow \
	 -Wsign-compare \
	 -Wundef \
	 -Wwrite-strings \
	 -Wbad-function-cast \
	 -Wmissing-prototypes \
	 -Wnested-externs \
	 -Wstrict-prototypes \
         -Wunreachable-code \
         -Wno-missing-declarations \
	 -Wno-variadic-macros

# ------------------------------------------------------------------

CFLAGS= -std=c99 -fPIC \
	$(SYSCFLAGS) $(ASAN_FLAGS) \
	$(CWARNS) $(DEBUG_FLAG) -DLOGLEVEL=$(LOGLEVEL) $(COPT)

LIBS= -lm

# -----------------------------------------------------------------------------

$(PROGRAM): TAGS $(OBJECTS)
	$(CC) $(CFLAGS) $(LIBS) -o $(PROGRAM) $(PROGRAM).c $(OBJECTS) 

# ------------------------------------------------------------------

deps:
	printf '# Automatically generated by "make deps"\n' >Makefile.depends && \
	$(CC) -MM *.c >>Makefile.depends

clean:
	-rm -f *.o *.gcda *.gcov *.gcno
	-rm -f $(PROGRAM) $(REPORTPROGRAM)

tags TAGS: *.[ch]
	@if ! type "etags" > /dev/null 2>&1; then \
	echo "INFO: etags not found, skipping TAGS file update"; \
	else \
	  echo "INFO: running etags to update TAGS file"; \
	  etags -o TAGS *.[ch]; \
	fi

.PHONY: default debug release install clean deps tags config help
